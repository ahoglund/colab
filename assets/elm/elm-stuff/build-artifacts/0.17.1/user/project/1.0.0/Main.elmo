var _user$project$Main$setActiveClass = F2(
	function (cell_id, model) {
		var _p0 = model.current_beat;
		if (_p0.ctor === 'Nothing') {
			return 'inactive';
		} else {
			return (_elm_lang$core$Native_Utils.eq(model.is_playing, true) && _elm_lang$core$Native_Utils.eq(cell_id, _p0._0)) ? 'activated' : 'deactivated';
		}
	});
var _user$project$Main$setActiveCell = F2(
	function (track, beat) {
		return (_elm_lang$core$Native_Utils.eq(beat.is_active, true) && _elm_lang$core$Native_Utils.eq(beat.track_id, track.id)) ? 'selected' : 'deselected';
	});
var _user$project$Main$stepEditorTableHeader = function (model) {
	return A2(
		_elm_lang$html$Html$tr,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$append,
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$th,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]),
			A2(
				_elm_lang$core$List$map,
				function (beat_id) {
					return A2(
						_elm_lang$html$Html$th,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(beat_id))
							]));
				},
				_elm_lang$core$Native_List.range(1, model.total_beats))));
};
var _user$project$Main$stepEditorHeader = A2(
	_elm_lang$html$Html$h3,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('Sequencer')
		]));
var _user$project$Main$toggleCell = F3(
	function (current_track, current_cell, updated_cell) {
		return (_elm_lang$core$Native_Utils.eq(current_track.id, updated_cell.track_id) && _elm_lang$core$Native_Utils.eq(current_cell.id, updated_cell.id)) ? (_elm_lang$core$Native_Utils.eq(updated_cell.is_active, true) ? _elm_lang$core$Native_Utils.update(
			current_cell,
			{is_active: false}) : _elm_lang$core$Native_Utils.update(
			current_cell,
			{is_active: true})) : current_cell;
	});
var _user$project$Main$toggleCells = F2(
	function (tracks, updated_cell) {
		return A2(
			_elm_lang$core$List$map,
			function (track) {
				var new_cells = A2(
					_elm_lang$core$List$map,
					function (cell) {
						return A3(_user$project$Main$toggleCell, track, cell, updated_cell);
					},
					track.cells);
				return _elm_lang$core$Native_Utils.update(
					track,
					{cells: new_cells});
			},
			tracks);
	});
var _user$project$Main$playSounds = F2(
	function (model, current_beat) {
		var _p1 = current_beat;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[_elm_lang$core$Platform_Cmd$none]);
		} else {
			return _elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					function (track) {
						return A2(
							_elm_lang$core$List$map,
							function (cell) {
								return (cell.is_active && _elm_lang$core$Native_Utils.eq(_p1._0, cell.id)) ? _user$project$Cmds$playSound(track.sample_file) : _elm_lang$core$Platform_Cmd$none;
							},
							track.cells);
					},
					model.tracks));
		}
	});
var _user$project$Main$setCurrentBeat = function (model) {
	var _p2 = model.current_beat;
	if (_p2.ctor === 'Nothing') {
		return _elm_lang$core$Native_Utils.eq(model.is_playing, true) ? _elm_lang$core$Maybe$Just(1) : _elm_lang$core$Maybe$Nothing;
	} else {
		var _p3 = _p2._0;
		return _elm_lang$core$Native_Utils.eq(model.is_playing, true) ? (_elm_lang$core$Native_Utils.eq(_p3, model.total_beats) ? _elm_lang$core$Maybe$Just(1) : _elm_lang$core$Maybe$Just(_p3 + 1)) : _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Main$decodeCell = A4(
	_elm_lang$core$Json_Decode$object3,
	_user$project$Cell$Cell,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'track_id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'is_active', _elm_lang$core$Json_Decode$bool),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int));
var _user$project$Main$decodeBpm = A2(_elm_lang$core$Json_Decode_ops[':='], 'bpm', _elm_lang$core$Json_Decode$int);
var _user$project$Main$beatCount = _elm_lang$core$Native_List.range(1, 16);
var _user$project$Main$jamChannelName = 'jam:room:';
var _user$project$Main$socketServer = 'ws://localhost:4000/socket/websocket';
var _user$project$Main$JamFlags = function (a) {
	return {jam_id: a};
};
var _user$project$Main$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {tracks: a, total_beats: b, current_beat: c, current_key: d, is_playing: e, phxSocket: f, bpm: g, jam_id: h};
	});
var _user$project$Main$Metronome = function (a) {
	return {tick: a};
};
var _user$project$Main$decodeMetronomeTick = A2(
	_elm_lang$core$Json_Decode$object1,
	_user$project$Main$Metronome,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'tick', _elm_lang$core$Json_Decode$int));
var _user$project$Main$SendBpmUpdate = function (a) {
	return {ctor: 'SendBpmUpdate', _0: a};
};
var _user$project$Main$ReceiveUpdatedBpm = function (a) {
	return {ctor: 'ReceiveUpdatedBpm', _0: a};
};
var _user$project$Main$SendUpdatedCell = function (a) {
	return {ctor: 'SendUpdatedCell', _0: a};
};
var _user$project$Main$stepEditorCell = F3(
	function (model, track, cell) {
		return A2(
			_elm_lang$html$Html$td,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$id(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'track-',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(track.id),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-cell-',
								_elm_lang$core$Basics$toString(cell.id))))),
					_elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_user$project$Main$setActiveClass, cell.id, model),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(_user$project$Main$setActiveCell, track, cell)))),
					_elm_lang$html$Html_Events$onClick(
					_user$project$Main$SendUpdatedCell(
						A3(_user$project$Cell$Cell, track.id, cell.is_active, cell.id)))
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$Main$stepEditorTrack = F2(
	function (model, track) {
		return A2(
			_elm_lang$html$Html$tr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(
				_elm_lang$core$List$append,
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$td,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('sample')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$span,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(track.name)
									]))
							]))
					]),
				A2(
					_elm_lang$core$List$map,
					function (cell) {
						return A3(_user$project$Main$stepEditorCell, model, track, cell);
					},
					track.cells)));
	});
var _user$project$Main$stepEditorTracks = function (model) {
	return A2(
		_elm_lang$html$Html$tbody,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$map,
			function (track) {
				return A2(_user$project$Main$stepEditorTrack, model, track);
			},
			model.tracks));
};
var _user$project$Main$stepEditor = function (model) {
	return A2(
		_elm_lang$html$Html$table,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('table table-hover table-bordered')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$stepEditorTableHeader(model),
				_user$project$Main$stepEditorTracks(model)
			]));
};
var _user$project$Main$stepEditorSection = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('sequencer')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$stepEditorHeader,
				_user$project$Main$stepEditor(model)
			]));
};
var _user$project$Main$ReceiveUpdatedCell = function (a) {
	return {ctor: 'ReceiveUpdatedCell', _0: a};
};
var _user$project$Main$ReceiveMetronomeTick = function (a) {
	return {ctor: 'ReceiveMetronomeTick', _0: a};
};
var _user$project$Main$initPhxSocket = function (jam_id) {
	return A4(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
		'update_bpm',
		A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, jam_id),
		_user$project$Main$ReceiveUpdatedBpm,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'update_cell',
			A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, jam_id),
			_user$project$Main$ReceiveUpdatedCell,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'metronome_tick',
				A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, jam_id),
				_user$project$Main$ReceiveMetronomeTick,
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(_user$project$Main$socketServer)))));
};
var _user$project$Main$initModel = F2(
	function (jamFlags, tracks) {
		return {
			tracks: tracks,
			total_beats: _elm_lang$core$List$length(_user$project$Main$beatCount),
			is_playing: false,
			phxSocket: _user$project$Main$initPhxSocket(jamFlags.jam_id),
			jam_id: jamFlags.jam_id,
			bpm: 120,
			current_key: _elm_lang$core$Maybe$Nothing,
			current_beat: _elm_lang$core$Maybe$Nothing
		};
	});
var _user$project$Main$LeaveChannel = {ctor: 'LeaveChannel'};
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PhoenixMsg':
				var _p5 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p4._0, model.phxSocket);
				var phxSocket = _p5._0;
				var phxCmd = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'ReceiveUpdatedCell':
				var _p6 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$decodeCell, _p4._0);
				if (_p6.ctor === 'Ok') {
					var tracks = A2(_user$project$Main$toggleCells, model.tracks, _p6._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{tracks: tracks}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ReceiveUpdatedBpm':
				var _p7 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$decodeBpm, _p4._0);
				if (_p7.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{bpm: _p7._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SendUpdatedCell':
				var _p9 = _p4._0;
				var tracks = A2(_user$project$Main$toggleCells, model.tracks, _p9);
				var payload = _elm_lang$core$Json_Encode$object(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'track_id',
							_1: _elm_lang$core$Json_Encode$int(_p9.track_id)
						},
							{
							ctor: '_Tuple2',
							_0: 'is_active',
							_1: _elm_lang$core$Json_Encode$bool(_p9.is_active)
						},
							{
							ctor: '_Tuple2',
							_0: 'id',
							_1: _elm_lang$core$Json_Encode$int(_p9.id)
						}
						]));
				var push$ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$init,
						'update_cell',
						A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, model.jam_id)));
				var _p8 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push$, model.phxSocket);
				var phxSocket = _p8._0;
				var phxCmd = _p8._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tracks: tracks, phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'ReceiveMetronomeTick':
				var _p10 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$decodeMetronomeTick, _p4._0);
				if (_p10.ctor === 'Ok') {
					var current_beat = _user$project$Main$setCurrentBeat(model);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{current_beat: current_beat}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							A2(_user$project$Main$playSounds, model, current_beat))
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SendBpmUpdate':
				var payload = _elm_lang$core$Json_Encode$object(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'bpm',
							_1: _elm_lang$core$Json_Encode$int(_p4._0)
						}
						]));
				var push$ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$init,
						'update_bpm',
						A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, model.jam_id)));
				var _p11 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push$, model.phxSocket);
				var phxSocket = _p11._0;
				var phxCmd = _p11._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'PlaySound':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Cmds$playSound(_p4._0)
				};
			case 'PlaySynth':
				var _p13 = _p4._0;
				var _p12 = _p13;
				if (_p12.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{current_key: _p13}),
						_1: _user$project$Cmds$stopSynth('stop')
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{current_key: _p13}),
						_1: _user$project$Cmds$playSynth(
							_user$project$Keys$toFrequency(_p13))
					};
				}
			case 'LeaveChannel':
				var _p14 = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$leave,
					A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, model.jam_id),
					model.phxSocket);
				var phxSocket = _p14._0;
				var phxCmd = _p14._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'Play':
				var current_beat = _user$project$Main$setCurrentBeat(model);
				return _elm_lang$core$Native_Utils.eq(model.is_playing, true) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{current_beat: current_beat}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						A2(_user$project$Main$playSounds, model, current_beat))
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{is_playing: true}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						A2(_user$project$Main$playSounds, model, current_beat))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{current_beat: _elm_lang$core$Maybe$Nothing, is_playing: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$init = function (jamFlags) {
	var model = A2(
		_user$project$Main$initModel,
		jamFlags,
		_user$project$Track$defaultTracks(_user$project$Main$beatCount));
	var channel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init(
		A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$jamChannelName, model.jam_id));
	var _p15 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
	var phxSocket = _p15._0;
	var phxCmd = _p15._1;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{phxSocket: phxSocket}),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
	};
};
var _user$project$Main$PlaySynth = function (a) {
	return {ctor: 'PlaySynth', _0: a};
};
var _user$project$Main$Stop = {ctor: 'Stop'};
var _user$project$Main$Play = {ctor: 'Play'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$bass_key_down = function (maybeKey) {
	var onKeyDown = F2(
		function (currentKey, keyCode) {
			return _elm_lang$core$Native_Utils.eq(
				_user$project$Keys$fromKeyCode(keyCode),
				currentKey) ? _user$project$Main$NoOp : _user$project$Main$PlaySynth(
				_user$project$Keys$fromKeyCode(keyCode));
		});
	return _elm_lang$keyboard$Keyboard$downs(
		onKeyDown(maybeKey));
};
var _user$project$Main$base_key_up = function (maybeKey) {
	var onKeyUp = F2(
		function (currentKeyCode, keyCode) {
			return _elm_lang$core$Native_Utils.eq(
				_user$project$Keys$fromKeyCode(keyCode),
				_elm_lang$core$Maybe$Just(currentKeyCode)) ? _user$project$Main$PlaySynth(_elm_lang$core$Maybe$Nothing) : _user$project$Main$NoOp;
		});
	var _p16 = maybeKey;
	if (_p16.ctor === 'Nothing') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return _elm_lang$keyboard$Keyboard$ups(
			onKeyUp(_p16._0));
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Main$PhoenixMsg),
				_user$project$Main$bass_key_down(model.current_key),
				_user$project$Main$base_key_up(model.current_key)
			]));
};
var _user$project$Main$PlaySound = function (a) {
	return {ctor: 'PlaySound', _0: a};
};
var _user$project$Main$pads = function (track) {
	return A2(
		_elm_lang$html$Html$td,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn'),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$PlaySound(track.sample_file))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-play')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				_elm_lang$html$Html$text(track.name)
			]));
};
var _user$project$Main$buttons = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-success'),
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Play)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-play')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-danger'),
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Stop)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-stop')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-default'),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$SendBpmUpdate(120))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'BPM: ',
							_elm_lang$core$Basics$toString(model.bpm)))
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-default'),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$SendBpmUpdate(model.bpm + 1))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-arrow-up')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-default'),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$SendBpmUpdate(model.bpm - 1))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-arrow-down')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn btn-warning'),
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$PlaySound('/samples/its_alive.wav'))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('!!!')
					]))
			]));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('container')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$stepEditorSection(model),
				_user$project$Main$buttons(model)
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$programWithFlags(
		{init: _user$project$Main$init, subscriptions: _user$project$Main$subscriptions, update: _user$project$Main$update, view: _user$project$Main$view}),
	flags: A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'jam_id', _elm_lang$core$Json_Decode$string),
		function (jam_id) {
			return _elm_lang$core$Json_Decode$succeed(
				{jam_id: jam_id});
		})
};
